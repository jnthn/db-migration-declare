use v6.d;
use DB::Migration::Declare::Applicator;
use DB::Migration::Declare::MigrationDirection;
use DB::Migration::Declare::Database::Postgres;
use Test;
use Test::ContainerizedService;

# Ensure we have DB::Pg available.
try require ::('DB::Pg');
my $pg = ::('DB::Pg');
if $pg ~~ Failure {
    skip 'No DB::Pg available for testing';
    exit;
}

test-service 'postgres', -> (:$conninfo, *%) {
    my $conn = $pg.new(:$conninfo);
    diag 'Connected to test Postgres instance';

    subtest 'Initial application of a single migration' => {
        dies-ok { $conn.query('insert into skyscrapers (name, height) values ($1,$2)', 'Burj Khalifa', 828); },
                'Insert query fails before running migration to create table';

        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/single-create-table-migration.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        lives-ok { $applicator.check }, 'Loaded schema checks OK';
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'Successfully migrated to the latest version';
        is $status.direction, DB::Migration::Declare::MigrationDirection::Up, 'Correct direction';
        is $status.migrations.elems, 1, 'Applied one migration';

        lives-ok { $conn.query('insert into skyscrapers (name, height) values ($1,$2)', 'Burj Khalifa', 828); },
                'Insert query succeeds after running migration that creates table';
        lives-ok { $conn.query('insert into skyscrapers (name, height) values ($1,$2)', 'Shanghai Tower', 632); },
                'Insert query succeeds after running migration that creates table';
        given $conn.query('select id, name, height from skyscrapers order by id').hashes -> @results {
            is @results.elems, 2, 'Expected number of results';
            is @results[0]<id>, 1, 'Correct auto-increment primary key (1)';
            is @results[1]<id>, 2, 'Correct auto-increment primary key (2)';
            is-deeply @results.map(*<height>).list, (828, 632), 'Correct inserted data';
        }
        dies-ok { $conn.query('insert into skyscrapers (name, height) values ($1,$2)', 'Burj Khalifa', 800); },
                'Unique key, as requested in schema, is enforced';
        dies-ok { $conn.query('insert into skyscrapers (name) values ($1)', 'Taipei 101'); },
                'Non-null constraint is enforced (1)';
        dies-ok { $conn.query('insert into skyscrapers (height) values ($1)', 508); },
                'Non-null constraint is enforced (2)';
    }

    subtest 'No changes when migration already applied' => {
        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/single-create-table-migration.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'No error when running migration again';
        is $status.migrations.elems, 0, 'No migrations were applied';
    }

    subtest 'Error when inconsistent history' => {
        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/single-create-table-wrongly-modified.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        throws-like { $applicator.to-latest },
                X::DB::Migration::Declare::InconsistentHistory,
                specification-description => 'Setup',
                stored-description => 'Setup',
                'Error when specification has been modified independent of the database';
    }

    subtest 'Additional migrations are applied' => {
        dies-ok { $conn.query('insert into countries (name) values ($1)', 'United Arab Emirates'); },
                'Insert query fails before running migration that adds second table';

        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/add-second-table.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'No error when running additional migration';
        is $status.migrations.elems, 1, 'One further migration was applied';

        lives-ok { $conn.query('insert into countries (name) values ($1)', 'United Arab Emirates'); },
                'Insert query works after migration created second tablee';
        is $conn.query('select id, name, height from skyscrapers order by id').hashes.elems, 2,
                'Data in table created by previous migration still in place';
        given $conn.query('select id, name from countries').hashes -> @results {
            is @results.elems, 1, 'Have data inserted into newly created table';
            is @results[0]<id>, 1, 'Correct value (1)';
            is @results[0]<name>, 'United Arab Emirates', 'Correct value (2)';
        }
    }

    subtest 'Alter table migration works' => {
        dies-ok { $conn.query('update skyscrapers set country = 1 where id = 1;'); },
                'Update query fails before running migration that adds country column';

        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/table-alteration.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'No error when running additional migration';
        is $status.migrations.elems, 1, 'One further migration was applied';

        lives-ok { $conn.query('update skyscrapers set country = 1 where id = 1;'); },
                'Update query succeeds after running migration that adds country column';
        dies-ok { $conn.query('update skyscrapers set country = 42 where id = 1;'); },
                'Foreign key specification is enforced';
    }

    subtest 'Migration dropping column and table works' => {
        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/drop-stuff.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'No error when running additional migration';
        is $status.migrations.elems, 1, 'One further migration was applied';

        dies-ok { $conn.query('select id, name from countries') },
                'Query on dropped countries table fails';
        dies-ok { $conn.query('select country from skyscrapers') },
                'Query to update dropped country column fails';
    }

    subtest 'Migration renaming column works' => {
        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/rename-column.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'No error when running additional migration';
        is $status.migrations.elems, 1, 'One further migration was applied';

        dies-ok { $conn.query('select height from skyscrapers') },
                'Query using old column name fails';
        is $conn.query('select id, name, architectural_height from skyscrapers order by id').hashes.elems, 2,
                'Query using new column name works';
    }

    subtest 'Migration renaming table works' => {
        my $applicator = DB::Migration::Declare::Applicator.new:
                schema-id => 'test',
                source => $*PROGRAM.parent.add('test-data/rename-table.raku'),
                database => DB::Migration::Declare::Database::Postgres.new,
                connection => $conn;
        my DB::Migration::Declare::Applicator::MigrationOutcome $status;
        lives-ok { $status = $applicator.to-latest }, 'No error when running additional migration';
        is $status.migrations.elems, 1, 'One further migration was applied';

        dies-ok { $conn.query('select name from skyscrapers') },
                'Query using old table name fails';
        is $conn.query('select name from tall_buildings').hashes.elems, 2,
                'Query using new table name works';
    }
}

END done-testing;
